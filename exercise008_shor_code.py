# Quantum Shor Code

from openql import openql as ql
import os

curdir = os.path.dirname(__file__)
output_dir = os.path.join(curdir, 'cqasm_files')
ql.set_option('output_dir', output_dir)
ql.set_option('write_qasm_files', 'yes')

config_fn  = os.path.join(curdir, 'config_qx.json')
platform   = ql.Platform('platform_none', config_fn)

num_qubits = 9
p = ql.Program('exercise_qasm_008', platform, num_qubits)

k1 = ql.Kernel("initialize", platform, num_qubits)
for i in range(0, num_qubits):
	k1.gate('prep_z', [i])	# Initialize all qubits to |0>
k1.gate('rx', [0], 0, 1.3)	# Create a arbitrary state
k1.gate('ry', [0], 0, 0.3)	# Create a arbitrary state
k1.display()
p.add_kernel(k1)

k2 = ql.Kernel("phase_encode", platform, num_qubits)
k2.gate('cnot', [0,3])
k2.gate('cnot', [0,6])
k2.gate('h', [0])
k2.gate('h', [3])
k2.gate('h', [6])
k2.display()
p.add_kernel(k2)

k3 = ql.Kernel("bitflip_encode", platform, num_qubits)
k3.gate('cnot', [0,1])
k3.gate('cnot', [0,2])
k3.gate('cnot', [3,4])
k3.gate('cnot', [3,5])
k3.gate('cnot', [6,7])
k3.gate('cnot', [6,8])
k3.display()
p.add_kernel(k3)

k4 = ql.Kernel("inject_error", platform, num_qubits)
k4.gate('x', [0])
k4.gate('z', [0])
k4.gate('x', [1])
k4.display()
p.add_kernel(k4)

k5 = ql.Kernel("bitflip_decode_and_correct", platform, num_qubits)
k5.gate('cnot', [0,1])
k5.gate('cnot', [0,2])
k5.gate('toffoli', [2,1,0])
k5.gate('cnot', [3,4])
k5.gate('cnot', [3,5])
k5.gate('toffoli', [5,4,3])
k5.gate('cnot', [6,7])
k5.gate('cnot', [6,8])
k5.gate('toffoli', [8,7,6])
k5.display()
p.add_kernel(k5)

k6 = ql.Kernel("phaseflip_decode_and_correct", platform, num_qubits)
k6.gate('h', [0])
k6.gate('h', [3])
k6.gate('h', [6])
k6.gate('cnot', [0,3])
k6.gate('cnot', [0,6])
k6.gate('toffoli', [6,3,0])
k6.display()
p.add_kernel(k6)

p.compile()

qasm = p.qasm()			# Get the cqasm generated by OpenQL
print(qasm)