# Quantum Surface Code Cycle

from openql import openql as ql
import os

curdir = os.path.dirname(__file__)
output_dir = os.path.join(curdir, 'cqasm_files')
ql.set_option('output_dir', output_dir)
ql.set_option('write_qasm_files', 'yes')

config_fn  = os.path.join(curdir, 'config_qx.json')
platform   = ql.Platform('platform_none', config_fn)

num_qubits = 17
p = ql.Program('exercise_qasm_007', platform, num_qubits)

Data = [0,1,2,3,4,5,6,7,8] 	# Data qubits
X_anc = [9,11,14,16]		# X ancilla
Z_anc = [12,10,13,15]		# Z ancilla

k1 = ql.Kernel("initialize", platform, num_qubits)
for i in range(0, num_qubits):
	k1.gate('prep_z', [i])	# Initialize all qubits to |0>
for i in Data:
	k1.gate('h', [i])		# Create full superposition
k1.display()
p.add_kernel(k1)

k2 = ql.Kernel("surface_code_cycle", platform, num_qubits)	# CNOT dance

# X0 ancilla
k2.gate('h', [X_anc[0]])
k2.gate('cnot', [X_anc[0],Data[1]])
k2.gate('cnot', [X_anc[0],Data[2]])
k2.gate('h', [X_anc[0]])

# X1 ancilla
k2.gate('h', [X_anc[1]])
k2.gate('cnot', [X_anc[1],Data[0]])
k2.gate('cnot', [X_anc[1],Data[1]])
k2.gate('cnot', [X_anc[1],Data[3]])
k2.gate('cnot', [X_anc[1],Data[4]])
k2.gate('h', [X_anc[1]])

# X2 ancilla
k2.gate('h', [X_anc[2]])
k2.gate('cnot', [X_anc[2],Data[4]])
k2.gate('cnot', [X_anc[2],Data[5]])
k2.gate('cnot', [X_anc[2],Data[7]])
k2.gate('cnot', [X_anc[2],Data[8]])
k2.gate('h', [X_anc[2]])

# X3 ancilla
k2.gate('h', [X_anc[3]])
k2.gate('cnot', [X_anc[3],Data[6]])
k2.gate('cnot', [X_anc[3],Data[7]])
k2.gate('h', [X_anc[3]])

# Z0 ancilla
k2.gate('h', [Z_anc[0]])
k2.gate('cz', [Z_anc[0],Data[0]])
k2.gate('cz', [Z_anc[0],Data[3]])
k2.gate('h', [Z_anc[0]])

# Z1 ancilla
k2.gate('h', [Z_anc[1]])
k2.gate('cz', [Z_anc[1],Data[1]])
k2.gate('cz', [Z_anc[1],Data[2]])
k2.gate('cz', [Z_anc[1],Data[4]])
k2.gate('cz', [Z_anc[1],Data[5]])
k2.gate('h', [Z_anc[1]])

# Z2 ancilla
k2.gate('h', [Z_anc[2]])
k2.gate('cz', [Z_anc[2],Data[3]])
k2.gate('cz', [Z_anc[2],Data[4]])
k2.gate('cz', [Z_anc[2],Data[6]])
k2.gate('cz', [Z_anc[2],Data[7]])
k2.gate('h', [Z_anc[2]])

# Z3 ancilla
k2.gate('h', [Z_anc[3]])
k2.gate('cz', [Z_anc[3],Data[5]])
k2.gate('cz', [Z_anc[3],Data[8]])
k2.gate('h', [Z_anc[3]])

k2.display() 
p.add_kernel(k2)

k3 = ql.Kernel("syndromes_code", platform, num_qubits)

for i in X_anc:
	k3.gate('measure', [i])
for i in Z_anc:
	k3.gate('measure', [i])
    
k3.display()
p.add_kernel(k3)

p.compile()

qasm = p.qasm()			# Get the cqasm generated by OpenQL
print(qasm)