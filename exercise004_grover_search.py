# Quantum Search

from openql import openql as ql
import os

curdir = os.path.dirname(__file__)
output_dir = os.path.join(curdir, 'cqasm_files')
ql.set_option('output_dir', output_dir)
ql.set_option('write_qasm_files', 'yes')

config_fn  = os.path.join(curdir, 'config_qx.json')
platform   = ql.Platform('platform_none', config_fn)

num_qubits = 3
p = ql.Program('exercise_qasm_004', platform, num_qubits)

k1 = ql.Kernel("initialize", platform, num_qubits)
for i in range(0, num_qubits):
	k1.gate('prep_z', [i])	# Initialize all qubits to |0>
for i in range(0, num_qubits):
	k1.gate('h', [i])		# Create full superposition
k1.display()
p.add_kernel(k1)

k2 = ql.Kernel("oracle", platform, num_qubits)

k2.gate('x', [2]) 
k2.gate('h', [2]) 
k2.gate('toffoli', [0,1,2])
k2.gate('h', [2]) 
k2.gate('x', [2])

k2.display()                # Mark |011>
p.add_kernel(k2)

k3 = ql.Kernel("amplify", platform, num_qubits)

for i in range(0, num_qubits):
	k3.gate('h', [i])
for i in range(0, num_qubits):
	k3.gate('x', [i])
k3.gate('h', [2]) 
k3.gate('toffoli', [0,1,2])
k3.gate('h', [2])
for i in range(0, num_qubits):
	k3.gate('x', [i])
for i in range(0, num_qubits):
	k3.gate('h', [i])
    
k3.display()
p.add_kernel(k3)

p.compile()

qasm = p.qasm()			# Get the cqasm generated by OpenQL
print(qasm)